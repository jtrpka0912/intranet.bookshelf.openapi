openapi: "3.0.0"
info:
  title: "Intranet Bookshelf API"
  description: "REST API communication between the front-end (React) and the back-end (NodeJS)."
  contact:
    name: "J. Trpka"
    url: "https://www.github.com/jtrpka0912"
    email: "jtrpka0912@gmail.com"
  version: "1.0.0"
servers:
  - url: "http://localhost:3001/api/v1"
    description: "Development Server"
components:
  examples:
    Book:
      summary: eBook Book Example
      description: A simple example of an ebook Book example.
      value:
        id: 4
        type: book
        name: Journey to the West
        path: /path/to/ebook/journey-to-the-west.pdf
        cover: /path/to/images/cover/journey-to-the-west.jpg
        didRead: false
        author: Unknown
    EbooksResponse:
      summary: eBooks Response Example
      description: A simple example of an eBook response.
      value:
        shelf:
        - $ref: '#/components/examples/Shelf'
        breadcrumbs:
        - $ref: '#/components/examples/Folder'
        directories:
        - $ref: '#/components/examples/Folder'
        files:
        - $ref: '#/components/examples/File'
    Error:
      summary: Error example
      description: A simple error example of the 404 errors.
      value:
        errorCode: 404
        errorCodeMessage: Not Found.
        errorMessage: Object was not found.
    File:
      summary: eBook Example
      description: A simple example of an ebook example.
      value:
        id: 1
        type: comicbook
        name: The Boys
        path: /path/to/ebook/the-boys/issues/001.cbz
        cover: /path/to/images/cover/the-boys/issues/001.cbz
        didRead: false
    Folder:
      summary: Folder Example
      description: A simple example of a directory in a shelf.
      value:
        id: 5
        name: O Reilly
        path: /path/to/books/oreilly
    Magazine:
      summary: eBook Magazine Example
      description: A simple example of an ebook Magazine example.
      value:
        id: 19
        type: magazine
        name: Magpi
        path: /path/to/magazines/magpi/issue014.pdf
        cover: /path/to/images/cover/magpi-issue014.jpg
        didRead: false
        issue: 14
    Shelf:
      summary: Bookshelf Example
      description: An example of a simple bookshelf.
      value:
        id: 2
        name: Bookshelf of Books
        root: /path/to/root
        showDirectories: true
        multiFile: false
  parameters:
    ShelfID:
      name: shelfId
      in: path
      description: Primary key for a shelf.
      required: true
      schema:
        type: integer
        minimum: 1
      example:
        value: 1
      style: simple
    FolderID:
      name: folderId
      in: path
      description: Primary key of a folder.
      required: true
      schema:
        type: integer
        minimum: 1
      example:
        value: 1
      style: simple
  requestBodies:
    CreateShelf:
      description: The fields needed to create a bookshelf.
      required: true
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Shelf'
          example:
            $ref: '#/components/examples/Shelf'
    UpdateShelf:
      description: The fields to update a bookshelf.
      required: true
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Shelf'
          example:
            $ref: '#/components/schemas/Shelf'
  responses:
    Ebooks:
      description: A typical response from retrieving files and folders from a shelf.
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/EbooksResponse'
    '204':
      description: 204 - No Content
    '400':
      description: 400 Error - Bad Request
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    '404':
      description: 404 Error - Not Found
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
    '500':
      description: 500 Error - Internal Server Error
      content:
        'application/json':
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Book:
      allOf:
      - $ref: '#/components/schemas/File'
      - description: Data representing an ebook Book inside the bookshelf.
      - type: object
        example: 
          $ref: '#/components/examples/Book'
        properties:
          author:
            type: string
            description: The author of the ebook book.
    EbooksResponse:
      type: object
      description: Response model with ebooks and directories.
      example:
        $ref: '#/components/examples/EbooksResponse'
      properties:
        shelf:
          description: The root directory that starts the shelf.
          allOf:
          - $ref: '#/components/schemas/Shelf'
        breadcrumbs:
          description: All of the previous directories that led to this directory.
          allOf:
          - $ref: '#/components/schemas/Folders'
        directories:
          description: All of the directories inside the directory.
          allOf:
          - $ref: '#/components/schemas/Folders'
        files:
          description: All of the files inside the directory.
          allOf:
          - $ref: '#/components/schemas/Files'  
    Error:
      type: object
      description: Base error object for other errors.
      example:
        $ref: '#/components/examples/Error'
      properties:
        errorCode:
          type: integer
          description: The error code number
        errorCodeMessage:
          type: string
          description: The error code message.
        errorMessage:
          type: string
          description: Message explaining the cause of the error.
      required:
        - errorCode
        - errorCodeMessage
      readOnly: true
    File:
      type: object
      description: Data representing an ebook inside the bookshelf.
      example:
        $ref: '#/components/examples/File'
      properties:
        id:
          type: integer
          description: The primary key.
          minimum: 1
        type:
          type: string
          description: Is this a book, magazine, or comic book?
          enum:
          - book
          - magazine
          - comicbook
        name:
          type: string
          description: Name of the ebook.
          minLength: 3
        path:
          type: string
          description: A path, prepended by a Shelf's root path, to a file in a server.
        cover:
          type: string
          description: Path to the image, created in backend, of the ebook.
        didRead:
          type: boolean
          description: Did the user read the ebook.
        createdAt:
          type: string
          format: datetime
          description: Timestamp when the object was created.
        updatedAt:
          type: string
          format: datetime
          description: Timestamp when the object was modified the last time.
      required:
        - id
        - type
        - name
        - path
    Files:
      type: array
      description: An array of ebook files.
      items:
        $ref: '#/components/schemas/File'
    Folder:
      type: object
      description: Data representing a directory inside the bookshelf.
      example:
        $ref: '#/components/examples/Folder'
      properties:
        id:
          type: integer
          description: The primary key.
          minimum: 1
        name:
          type: string
          description: Name of the directory; for example, a publisher or genre name.
          minLength: 3
        path:
          type: string
          description: A path, prepended by a Shelf's root path, to a directory in a server.
        createdAt:
          type: string
          format: datetime
          description: Timestamp when the object was created.
        updatedAt:
          type: string
          format: datetime
          description: Timestamp when the object was modified the last time.
      required:
        - id
        - name
        - path
    Folders:
      type: array
      description: An array of directories.
      items:
        $ref: '#/components/schemas/Folder'
    Magazine:
      allOf:
        - $ref: '#/components/schemas/File'
        - description: Data representing an ebook Magazine inside the bookshelf.
        - type: object
          example: 
            $ref: '#/components/examples/Book'
          properties:
            issue:
              type: integer
              description: The issue number of the ebook magazine.
    Shelf:
      type: object
      description: A single collection of ebooks from a root directory.
      example:
        $ref: '#/components/examples/Shelf'
      properties:
        id:
          type: integer
          description: The primary key.
          minimum: 1
        name:
          type: string
          description: Name of the shelf or collection.
          minLength: 3
        root:
          type: string
          format: path
          description: The starting, absolute path of the collection.
        showDirectories:
          type: boolean
          description: Allow the explorer to show all files (false) at once or separated in their respective directories (true).
          default: true
        multiFile:
          type: boolean
          description: Allow a single ebook to be a directory with multiple file types inside.
          default: false
        createdAt:
          type: string
          format: datetime
          description: Timestamp when the object was created.
        updatedAt:
          type: string
          format: datetime
          description: Timestamp when the object was modified the last time.
      required:
        - id
        - name
        - root
    Shelves:
      type: array
      description: An array of collections of ebooks.
      items:
        $ref: '#/components/schemas/Shelf'
paths:
  /ebooks/shelf/{shelfId}:
    summary: Base shelf directory
    description: An endpoint to interact with the base directory of the shelf.
    parameters:
      - $ref: '#/components/parameters/ShelfID'
    get:
      tags:
      - ebook
      - read
      summary: Retrieve base directory of a shelf.
      description: Retrieve all files and folders, at the base directory, of a shelf.
      operationId: retrieve-ebooks-base
      responses:
        '200':
          $ref: '#/components/responses/Ebooks'
        '404':
          $ref: '#/components/responses/404'
  /ebooks/shelf/{shelfId}/folder/{folderId}:
    summary: Shelf directory
    description: An endpoint to interact with folders, beyond the base directory, of a shelf.
    parameters:
      - $ref: '#/components/parameters/ShelfID'
      - $ref: '#/components/parameters/FolderID'
    get:
      tags:
      - ebook
      - read
      summary: Retrieve items in a folder.
      description: Traverse inside a folder, and retrieve files (ebooks) and folders.
      operationId: retrieve-ebooks-folder
      responses:
        '200':
          $ref: '#/components/responses/Ebooks'
        '404':
          $ref: '#/components/responses/404'
  /shelves:
    summary: Shelves Endpoints
    description: An endpoint to interact with multiple shelves or create a new shelf.
    get:
      tags: 
      - read
      - shelf
      summary: Retrieve all bookshelves.
      description: Retrieve all bookshelves that will allow the user to select and navigate.
      operationId: retrieve-shelves
      responses:
        '200':
          description: Retrieved a list of bookshelves.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Shelves'
    post:
      tags:
      - shelf
      - create
      summary: Create a bookshelf.
      description: Create a single bookshelf that will serve as a collection of ebooks.
      operationId: create-shelf
      requestBody:
       $ref: '#/components/requestBodies/CreateShelf'
      responses:
        '200':
          description: Created a new bookshelf.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Shelf'
        '400':
          $ref: '#/components/responses/400'
  /shelves/{shelfId}:
    summary: Single Shelf Endpoints
    description: An endpoint to interact with a single shelve.
    parameters:
      - $ref: '#/components/parameters/ShelfID'
    get:
      tags:
      - read
      - shelf
      summary: Retrieve single bookshelf.
      description: Retrieve a single bookshelf that will retrieve the rules for the collection of ebooks.
      operationId: retrieve-shelf
      responses:
        '200':
          description: Retrieved a single bookshelf.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Shelf'
        '404':
          $ref: '#/components/responses/404'
    put:
      tags:
      - shelf
      - update
      summary: Edit single bookshelf.
      description: Edit a single bookshelf by changing its name and rules.
      operationId: edit-shelf
      requestBody:
        $ref: '#/components/requestBodies/UpdateShelf'
      responses:
        '200':
          description: Edited an existing bookshelf.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Shelf'
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
    delete:
      tags:
      - delete
      - shelf
      summary: Remove single bookshelf.
      description: Remove a single bookshelf.
      operationId: remove-shelf
      responses:
        '204':
          description: Removed a single bookshelf.
          content:
            'application/json': {}
        '404':
          $ref: '#/components/responses/404'
  /shelves/{shelfId}/refresh:
    summary: Refresh Shelf
    description: An endpoint to refresh the shelf to check for any changes.
    parameters:
      - $ref: '#/components/parameters/ShelfID'
    get:
      tags:
        - shelf
        - read
      summary: Refresh the shelf.
      description: Refresh the shelf by scanning files in the server and updating the database.
      operationId: refresh-shelf
      responses:
        '204':
          $ref: '#/components/responses/204'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
          
tags:
- name: create
  description: Create operations
- name: delete
  description: Delete operations
- name: ebook
  description: eBook operations
- name: read
  description: Read operations
- name: shelf
  description: Bookshelf operations
- name: update
  description: Update operations